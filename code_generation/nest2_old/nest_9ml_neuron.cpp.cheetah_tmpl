
/*
 *  ${model.nest_classname}.cpp - automatically generated from nest_model_template.h
 *                                from a NineML (www.nineml.org) specification.
 *
 *
 */


\#include "exceptions.h"
\#include "$model.header_name"
\#include "network.h"
\#include "dict.h"
\#include "integerdatum.h"
\#include "doubledatum.h"
\#include "dictutils.h"
\#include "numerics.h"
\#include "analog_data_logger_impl.h"
\#include "lockptrdatum.h"

#include <limits>

using namespace nest;

// User defined names from 9ml model definition  
// have no mapping to NEST standard names, so define out own names.
// in 
namespace nest_nineml {
  namespace ${model.nest_classname}_names {

    const Name Regime9ML("Regime9ML");

# parameters
#for $p in $model.parameters
    const Name ${p.symbol}("$p.symbol");
#end for


# state_vars
#for $p in $model.state_vars
    const Name ${p.symbol}("$p.symbol");
#end for

# bindings/variables
#for $p in $model.binds
    const Name ${p.symbol}("$p.symbol");
#end for


  }
}

# Shorter for of model names namespace
#set $mynames="nest_nineml::%s_names" %($model.nest_classname,)
/* ---------------------------------------------------------------- 
 * Default constructors defining default parameters and state
 * ---------------------------------------------------------------- */
    
nest_nineml::$model.nest_classname::Parameters_::Parameters_()
  : \
#set $com = ','
#for $p in $model.parameters
  #if $p==$model.parameters[-1]
    #set $com = ''
  #end if
    ${p.symbol}(${p.initial_value})$com // $p.unit
#end for
  {}

nest_nineml::$model.nest_classname::State_::State_(const Parameters_& p)
  : \
#for $p in $model.state_vars
    ${p.symbol}(${p.initial_value}) // $p.unit
#end for
    regime_($model.initial_regime)
  {}

/* ---------------------------------------------------------------- 
 * Parameter and state extractions and manipulation functions
 * ---------------------------------------------------------------- */

void nest_nineml::$model.nest_classname::Parameters_::get(DictionaryDatum &d) const
{
#for $p in $model.parameters
  (*d)[$mynames::$p.symbol] = $p.symbol;
#end for

}

void nest_nineml::$model.nest_classname::Parameters_::set(const DictionaryDatum& d)
{
#for $p in $model.parameters
  updateValue<double>(d, $mynames::$p.symbol, $p.symbol);
#end for

  // TODO/FUTURE: handle 9ml parameter restrictions
  /*
  if ( C_m <= 0 )
    throw nest::BadProperty("The membrane capacitance must be strictly positive.");

  if ( V_reset >= V_th )
    throw nest::BadProperty("The reset potential must be below threshold.");
  
  if ( t_ref < 0 )
    throw nest::BadProperty("The refractory time must be at least one simulation step.");  

  */



}

void nest_nineml::$model.nest_classname::State_::get(DictionaryDatum &d) const
{
#for $p in $model.state_vars
  (*d)[$mynames::$p.symbol] = $p.symbol;
#end for

  // get regime
  (*d)[$mynames::Regime9ML] = regime_;

}

void nest_nineml::$model.nest_classname::State_::set(const DictionaryDatum& d, const Parameters_& p)
{

#for $p in $model.state_vars
  updateValue<double>(d, $mynames::$p.symbol, $p.symbol);
#end for

  // TODO/FUTURE: handle 9ml state_var restrictions

  //TODO: set regime?

}

void nest_nineml::$model.nest_classname::Variables_::get(DictionaryDatum &d) const
{
#for $p in $model.binds
  (*d)[$mynames::$p.symbol] = $p.symbol;
#end for
}



/* ---------------------------------------------------------------- 
 * Default and copy constructor for node
 * ---------------------------------------------------------------- */

nest_nineml::$model.nest_classname::$model.nest_classname()
  : Node(), 
    P_(), 
    S_(P_)
{}

nest_nineml::$model.nest_classname::$model.nest_classname(const $model.nest_classname& n)
  : Node(n), 
    P_(n.P_), 
    S_(n.S_)
{}

/* ---------------------------------------------------------------- 
 * Node initialization functions
 * ---------------------------------------------------------------- */

void nest_nineml::$model.nest_classname::init_node_(const Node& proto)
{
  const $model.nest_classname& pr = downcast<$model.nest_classname>(proto);
  P_ = pr.P_;
  S_ = pr.S_;
}

void nest_nineml::$model.nest_classname::init_state_(const Node& proto)
{
  const $model.nest_classname& pr = downcast<$model.nest_classname>(proto);
  S_ = pr.S_;
}

void nest_nineml::$model.nest_classname::init_buffers_()
{
  // Reset spike buffers.
  for(std::vector<RingBuffer>::iterator it = B_.spike_inputs_.begin();
      it != B_.spike_inputs_.end(); ++it) {

    it->clear(); // include resize

  }

  B_.currents_.clear();  // include resize
  B_.potentials_.clear_data(); // includes resize
}

void nest_nineml::$model.nest_classname::calibrate()
{
  const double h  = Time::get_resolution().get_ms(); 
  /*
  const double eh = std::exp(-h/P_.tau_syn);
  const double tc = P_.tau_syn / P_.C_m;

  // compute matrix elements, all other elements 0
  V_.P11 = eh;
  V_.P22 = eh;
  V_.P21 = h * eh;
  V_.P30 = h / P_.C_m;
  V_.P31 = tc * ( P_.tau_syn - (h+P_.tau_syn) * eh );
  V_.P32 = tc * ( 1 - eh );
  // P33_ is 1
    
  // initial value ensure normalization to max amplitude 1.0
  V_.pscInitialValue = 1.0 * numerics::e / P_.tau_syn;

  // refractory time in steps
  V_.t_ref_steps = Time(Time::ms(P_.t_ref)).get_steps();
  assert(V_.t_ref_steps >= 0);  // since t_ref_ >= 0, this can only fail in error
  */


# Evaluate bindings
#for $b in $model.binds
  V_.$b.symbol = $b.expression;
#end for
 
  //TODO

}

/* ---------------------------------------------------------------- 
 * Update and spike handling functions
 * ---------------------------------------------------------------- */

void nest_nineml::$model.nest_classname::update(Time const& slice_origin, 
                                   const nest::long_t from_step, 
                                   const nest::long_t to_step)
{

  const double h  = Time::get_resolution().get_ms(); 

  for ( long lag = from_step ; lag < to_step ; ++lag )
  {
    // order is important in this loop, since we have to use the old values
    // (those upon entry to the loop) on right hand sides everywhere

    // state update as per regime, then transitions
    switch (S_.regime_) {

    // TODO: synapses

    #for $r in $model.regimes

    case $r.symbol :
      
      // State update sequences
      #for $seq in $r.steps
      
      #if $isinstance($seq,$ODE)
      // TODO: more than forward euler
      $seq.var = rhs*h;
      #elif $isinstance($seq,$Assignment)
      $seq.lhs = $seq.expression
      #else

      #end if

      #end for $seq

     
      // transitions as per current regime
      #for $trans in $r.transitions

      if ($trans.condition) {
	S_.regime_ = $trans.to_regime
        #for $a in $trans.assignments
	  $a.lhs = $a.expression
	#end for
      }
      
      #end for $trans

      break;

    #end for $r


    } // case $r.symbol


    // TODO: which var is voltage?
    //B_.potentials_.record_data(slice_origin.get_steps()+lag, S_.V_m);

    // TODO: which var is spike var?

    // TODO: how to map synapse ports to input events for the neurons?


  }  
}                           

void nest_nineml::$model.nest_classname::handle(SpikeEvent & e)
{
  assert(e.get_delay() > 0);

  B_.spikes.add_value(e.get_rel_delivery_steps(network()->get_slice_origin()),
                      e.get_weight());
}

void nest_nineml::$model.nest_classname::handle(CurrentEvent& e)
{
  assert(e.get_delay() > 0);

  B_.currents_.add_value(e.get_rel_delivery_steps(network()->get_slice_origin()), 
		                    e.get_weight() * e.get_current());
}

// Do not move this function as inline to h-file. It depends on 
// analog_data_logger_impl.h being included here.
void nest_nineml::$model.nest_classname::handle(PotentialRequest& e)
{
  B_.potentials_.handle(*this, e);  // the logger does this for us
}
